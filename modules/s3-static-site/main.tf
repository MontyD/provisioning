provider "aws" {
  region = var.region
}

data "external" "release-resources" {
  program = ["node", "${path.module}/scripts/fetch-resources.js"]
  query = {
    owner          = var.github-owner
    repo           = var.github-repo
    version        = var.release-version
    deployableName = var.deployable-name
  }
}

resource "aws_s3_bucket" "bucket" {
  bucket = var.domain
  policy = <<POLICY
{
  "Id": "Policy1578353323744",
  "Version":"2012-10-17",
  "Statement":[
    {
      "Sid":"Stmt1578353317612",
      "Effect":"Allow",
      "Principal": "*",
      "Action": ["s3:GetObject"],
      "Resource": ["arn:aws:s3:::${var.domain}/*"]
    }
  ]
}
POLICY
  website {
    index_document = "index.html"
    error_document = contains(keys(data.external.release-resources.result), "error.html") ? "error.html" : "index.html"
  }
}

resource "aws_s3_bucket_object" "website_files" {
  for_each     = data.external.release-resources.result
  bucket       = aws_s3_bucket.bucket.bucket
  key          = basename(each.key)
  source       = each.key
  acl          = "public-read"
  etag         = filemd5(each.key)
  content_type = each.value
}

resource "aws_cloudfront_distribution" "cdn_distribution" {
  origin {
    domain_name = aws_s3_bucket.bucket.bucket_domain_name
    origin_id   = var.domain

    custom_origin_config {
      http_port              = "80"
      https_port             = "443"
      origin_protocol_policy = "http-only"
      origin_ssl_protocols   = ["TLSv1", "TLSv1.1", "TLSv1.2"]
    }
  }

  enabled             = true
  default_root_object = "index.html"

  // All values are defaults from the AWS console.
  default_cache_behavior {
    viewer_protocol_policy = "allow-all" // todo add 'redirect-to-https' when cert is being used
    compress               = true
    allowed_methods        = ["GET", "HEAD"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = var.domain
    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
  }

  // aliases = ["www.${var.domain}"] TODO once we have a cert

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  // TODO - use cert generated by acm
  viewer_certificate {
    cloudfront_default_certificate = true
  }
}